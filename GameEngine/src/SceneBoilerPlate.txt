#pragma once

#include "Scene.h"

class Screen;

class NewScene: public Scene
{
public:
	void Init() override;
	void Update(uint32_t dt) override;
	void Render(Screen& screen) override;
	const std::string& GetSceneName() const override;

private:

};




#include "NewScene.h"
#include "App.h"
#include "Screen.h"

void NewScene::Init()
{
	ButtonAction acceptAction;
	acceptAction.key = GameController::ActionKey();
	acceptAction.action = [this](uint32_t dt, InputState state)
	{
		
	};
	mGameController.AddInputActionForKey(acceptAction);
	
	ButtonAction backAction;
	backAction.key = GameController::CancelKey();
	backAction.action = [this](uint32_t dt, InputState state)
	{
		
	};
	mGameController.AddInputActionForKey(backAction);

	ButtonAction upAction;
	upAction.key = GameController::UpKey();
	upAction.action = [this](uint32_t dt, InputState state)
	{
		
	};
	mGameController.AddInputActionForKey(upAction);

	ButtonAction downAction;
	downAction.key = GameController::DownKey();
	downAction.action = [this](uint32_t dt, InputState state)
	{
		
	};
	mGameController.AddInputActionForKey(downAction);

	ButtonAction leftAction;
	leftAction.key = GameController::LeftKey();
	leftAction.action = [this](uint32_t dt, InputState state)
	{
		
	};
	mGameController.AddInputActionForKey(leftAction);

	ButtonAction rightAction;
	rightAction.key = GameController::RightKey();
	rightAction.action = [this](uint32_t dt, InputState state)
	{
		
	};
	mGameController.AddInputActionForKey(rightAction);
	
	mGameController.SetMouseMovedAction([this](const MousePosition& mousePosition)
	{
		mCursorPosition = {static_cast<float>(mousePosition.xPos), static_cast<float>(mousePosition.yPos)};
	});
	
	MouseButtonAction mouseAction;
	mouseAction.mouseButton = GameController::LeftMouseButton();
	mouseAction.mouseInputAction = [this](InputState state, const MousePosition& position)
	{
		
	};
	mGameController.AddMouseButtonAction(mouseAction);
}

void NewScene::Update(uint32_t dt)
{

}

void NewScene::Render(Screen& screen)
{

}

const std::string& NewScene::GetSceneName() const
{
	static std::string name = "New Scene";
	return name;
}